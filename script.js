document.addEventListener("DOMContentLoaded", function() {
    // Fun√ß√£o para carregar o hist√≥rico de conversas do LocalStorage
    function loadConversationHistory() {
        const conversation = JSON.parse(localStorage.getItem("conversation")) || [];
        conversation.forEach(msg => {
            showMessage(msg.text, msg.sender, false);
        });

        // Se o hist√≥rico estiver vazio (ap√≥s limpar), exibe a mensagem inicial
        if (conversation.length === 0) {
            showMessage("Ol√°! Eu sou o chatbot do FURIA CS. Digite 'oi' para come√ßar.", "bot");
        }
    }

    // Fun√ß√£o para salvar mensagens no LocalStorage
    function saveMessageToLocalStorage(text, sender) {
        let conversation = JSON.parse(localStorage.getItem("conversation")) || [];
        conversation.push({ text, sender, timestamp: new Date().toISOString() });
        localStorage.setItem("conversation", JSON.stringify(conversation));
    }

    // Fun√ß√£o para exibir mensagem no chat
    function showMessage(text, sender, save = true) {
        const chatWindow = document.getElementById("chat-window");
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message", sender);
        messageDiv.innerText = text;
        chatWindow.appendChild(messageDiv);
        chatWindow.scrollTop = chatWindow.scrollHeight;

        if (save) {
            saveMessageToLocalStorage(text, sender);
        }
    }

    // Fun√ß√£o para exibir bot√µes de respostas r√°pidas
    function showQuickReplies() {
        const chatWindow = document.getElementById("chat-window");
        const quickDiv = document.createElement("div");
        quickDiv.classList.add("quick-buttons");

        const opcoes = ["Not√≠cias", "Estat√≠sticas", "Agenda", "Curiosidades", "Loja"];
        opcoes.forEach(opcao => {
            const btn = document.createElement("button");
            btn.classList.add("quick-btn");
            btn.innerText = opcao;
            btn.addEventListener("click", () => {
                processUserMessage(opcao);
                quickDiv.remove();
            });
            quickDiv.appendChild(btn);
        });
        chatWindow.appendChild(quickDiv);
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    // Fun√ß√£o para limpar o hist√≥rico de mensagens
    function clearChatHistory() {
        localStorage.removeItem("conversation"); // Apaga do LocalStorage
        document.getElementById("chat-window").innerHTML = ""; // Apaga todas as mensagens da tela
    
        // Exibe a mensagem de confirma√ß√£o de hist√≥rico apagado
        showMessage("üóëÔ∏è Hist√≥rico de mensagens apagado! Iniciando uma nova conversa em instantes...", "bot");
    
        // Ap√≥s um intervalo de 2 segundos, exibe a mensagem inicial do bot
        setTimeout(() => {
            localStorage.removeItem("conversation"); // Apaga do LocalStorage
            document.getElementById("chat-window").innerHTML = ""; // Apaga todas as mensagens da tela
            showMessage("Ol√°! Eu sou o chatbot do FURIA CS. Digite 'oi' para come√ßar.", "bot");
        }, 2000); // 2000 milissegundos = 2 segundos
    }
    


    // Adicionando evento ao bot√£o "Limpar Hist√≥rico"
    document.getElementById("clear-history-btn").addEventListener("click", clearChatHistory);

    // Fun√ß√µes para buscar informa√ß√µes (simula√ß√£o de API)
    function fetchLatestNews() {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve("üí• √öltima not√≠cia: O FURIA acaba de anunciar novos refor√ßos para a pr√≥xima temporada!");
                showQuickReplies()
            }, 1500);
        });
    }

    function fetchStatistics() {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve("üìä Estat√≠sticas: Vit√≥rias: 15, Derrotas: 5, K/D m√©dio: 1.5");
                showQuickReplies()
            }, 1200);
        });
    }

    function fetchAgenda() {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve("üìÖ Agenda: Pr√≥ximo jogo:\n- 25/10: FURIA vs TimeX\n- 30/10: FURIA vs TeamY");
                showQuickReplies()
            }, 1200);
        });
    }

    function fetchCuriosities() {
        const curiosidades = [
            "ü§´ O FURIA surgiu de uma paix√£o pelos eSports e se tornou um dos times mais din√¢micos do cen√°rio!",
            "üî• O nome 'FURIA' representa a agressividade e determina√ß√£o do time em competi√ß√µes.",
            "üèÜ O FURIA j√° participou de grandes torneios internacionais, colocando o Brasil em destaque no CS.",
            "üéØ Um dos diferenciais do FURIA √© seu estilo de jogo agressivo e altamente estrat√©gico.",
            "üöÄ O time come√ßou com poucos recursos e hoje √© uma das maiores organiza√ß√µes de eSports do pa√≠s!",
            "üéÆ O FURIA √© conhecido por sua habilidade em criar jogadas inesperadas e surpreendentes.",
            "ü§´ FURIA √© uma organiza√ß√£o brasileira que atua nas modalidades de e-sports em Counter-Strike 2, Rocket League, League of Legends, Valorant, Rainbow Six: Siege, Apex Legends, e Futebol de 7. Fundada em 2017, a FURIA possui o time de Counter-Strike que melhor desempenha nas competi√ß√µes internacionais mais recentes, sempre a frente nas coloca√ß√µes entre equipes do pa√≠s.",
            "üòé A organiza√ß√£o foi eleita por dois anos consecutivos, em 2020 e 2021, como a melhor organiza√ß√£o de esportes eletr√¥nicos no Pr√™mio eSports Brasil. Em 2022, foi apontada como a quinta maior organiza√ß√£o de esportes eletr√¥nicos do mundo pelo portal norte-americano Nerd Street."
        ];
    
        return new Promise((resolve) => {
            setTimeout(() => {
                const curiosidadeAleatoria = curiosidades[Math.floor(Math.random() * curiosidades.length)];
                resolve(curiosidadeAleatoria);
                showQuickReplies();
            }, 1200);
        });
    }

    function fetchStore() {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve("üõí Loja: Confira nossos produtos oficiais em https://www.furia.gg/produtos!");
                showQuickReplies()
            }, 1200);
        });
    }

    // Fun√ß√£o para processar mensagens do usu√°rio
    function processUserMessage(message) {
        showMessage(message, "user");
        processBotResponse(message);
    }

    // Fun√ß√£o para processar a resposta do bot com chamadas ass√≠ncronas e mensagens de "carregando"
    function processBotResponse(message) {
        const msg = message.toLowerCase().trim();

        if (msg.includes("not√≠cia") || msg === "not√≠cias") {
            showMessage("Carregando as not√≠cias...", "bot");
            fetchLatestNews().then(response => {
                showMessage(response, "bot");
            });
        } else if (msg.includes("estat√≠stica") || msg === "estat√≠sticas") {
            showMessage("Carregando as estat√≠sticas...", "bot");
            fetchStatistics().then(response => {
                showMessage(response, "bot");
            });
        } else if (msg.includes("agenda") || msg === "agenda") {
            showMessage("Carregando a agenda...", "bot");
            fetchAgenda().then(response => {
                showMessage(response, "bot");
            });
        } else if (msg.includes("curiosidade") || msg === "curiosidades") {
            showMessage("Carregando curiosidades...", "bot");
            fetchCuriosities().then(response => {
                showMessage(response, "bot");
            });
        }
        else if (msg.includes("loja") || msg === "loja") {
            showMessage("Carregando a loja...", "bot");
            fetchStore().then(response => {
                showMessage(response, "bot");
            });
        } else if (msg === "oi" || msg === "ol√°") {
            showMessage("Ol√°! Sou o chatbot oficial do FURIA CS. Selecione uma op√ß√£o:", "bot");
            showQuickReplies();
        } else {
            showMessage("Desculpe, n√£o entendi. Tente usar uma das op√ß√µes: Not√≠cias, Estat√≠sticas, Agenda ou Curiosidades.", "bot");
            showQuickReplies();
        }
    }

    // Evento de clique para enviar mensagem
    const sendBtn = document.getElementById("send-btn");
    sendBtn.addEventListener("click", () => {
        const inputField = document.getElementById("user-input");
        const message = inputField.value;
        if (message.trim() !== "") {
            processUserMessage(message);
            inputField.value = "";
        }
    });

    // Permite enviar a mensagem com a tecla Enter
    const userInput = document.getElementById("user-input");
    userInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            event.preventDefault();
            sendBtn.click();
        }
    });

    // Inicializa o chat: carrega o hist√≥rico e exibe mensagem inicial se necess√°rio
    loadConversationHistory();
});
